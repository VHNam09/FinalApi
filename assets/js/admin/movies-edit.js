// Simple toggle for responsive sidebar
document.querySelector('.menu-toggle').addEventListener('click', function () {
    document.querySelector('.sidebar').classList.toggle('active');
});

// Format date for display
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN');
}

// Display formatted created date
document.getElementById('createdAtDisplay').textContent = formatDate(document.getElementById('createdAt').value);

// Poster preview
document.getElementById('poster').addEventListener('input', function () {
    const url = this.value.trim();
    const preview = document.getElementById('posterPreview');

    if (!url) {
        preview.innerHTML = '<div class="poster-placeholder">üñºÔ∏è</div>';
        return;
    }

    const img = new Image();
    img.onload = function () {
        preview.innerHTML = '';
        preview.appendChild(img);
    };

    img.onerror = function () {
        preview.innerHTML = '<div class="poster-placeholder">‚ùå</div>';
    };

    img.src = url;
});

// Form validation
document.getElementById('editMovieForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    let isValid = true;

    // Validation logic (gi·ªØ nguy√™n ph·∫ßn validation c·ªßa b·∫°n)
    // ... (ph·∫ßn validation b·∫°n ƒë√£ vi·∫øt)

    if (isValid) {
        const submitButton = document.getElementById('submitButton');
        const originalButtonText = submitButton.textContent;
        
        try {
            // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
            submitButton.disabled = true;
            submitButton.textContent = 'ƒêang c·∫≠p nh·∫≠t...';

            // Collect selected genres
            const checkedGenres = document.querySelectorAll('input[name="genres"]:checked');
            const genreIds = Array.from(checkedGenres).map(checkbox => parseInt(checkbox.value));

            // Prepare data for submission
            const movieData = {
                id: parseInt(document.getElementById('movieId').value),
                title: document.getElementById('title').value.trim(),
                description: document.getElementById('description').value.trim(),
                releaseYear: parseInt(document.getElementById('releaseYear').value),
                director: document.getElementById('director').value.trim(),
                actors: document.getElementById('actors').value.trim(),
                duration: parseInt(document.getElementById('duration').value),
                country: document.getElementById('country').value.trim(),
                poster: document.getElementById('poster').value.trim(),
                trailerUrl: document.getElementById('trailerUrl').value.trim(),
                genreIds: genreIds // S·ª≠ d·ª•ng genreIds thay v√¨ genres ƒë·ªÉ ph√π h·ª£p v·ªõi API
            };

            // G·ªçi API PUT
            const response = await fetch('https://localhost:7186/api/Movie/' + id, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + localStorage.getItem('token') // N·∫øu c·∫ßn
                },
                body: JSON.stringify(movieData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'C·∫≠p nh·∫≠t th·∫•t b·∫°i');
            }

            // X·ª≠ l√Ω th√†nh c√¥ng
            alert('Phim ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!');
            window.location.href = 'movies.html';

        } catch (error) {
            console.error('Error updating movie:', error);
            alert(`L·ªói khi c·∫≠p nh·∫≠t phim: ${error.message}`);
        } finally {
            // Kh√¥i ph·ª•c tr·∫°ng th√°i n√∫t
            submitButton.disabled = false;
            submitButton.textContent = originalButtonText;
        }
    }
});

// Cancel button
document.getElementById('cancelButton').addEventListener('click', function () {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy? M·ªçi thay ƒë·ªïi s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u.')) {
        window.location.href = 'movies.html';
    }
});

// Delete movie button
document.getElementById('deleteMovieButton').addEventListener('click', async function() {
    const movieId = this.getAttribute('data-movie-id');
    
    if (!movieId) {
        alert('Kh√¥ng t√¨m th·∫•y ID phim');
        return;
    }

    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a phim n√†y?')) {
        try {
            // G·ªçi API DELETE b·∫±ng fetch
            const response = await fetch('https://localhost:7186/api/Movie/' + id, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    // Th√™m header Authorization n·∫øu API y√™u c·∫ßu
                    'Authorization': 'Bearer ' + localStorage.getItem('token')
                }
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'L·ªói khi x√≥a phim');
            }

            // X·ª≠ l√Ω khi x√≥a th√†nh c√¥ng
            alert('Phim ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!');
            window.location.href = 'movies.html'; // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang danh s√°ch
            
        } catch (error) {
            console.error('L·ªói:', error);
            // alert(`X√≥a phim th·∫•t b·∫°i: ${error.message}`);
        }
    }
});










//L·∫•y id 
const params = new URLSearchParams(window.location.search);
const id = params.get('id');

// G·ªçi API l·∫•y chi ti·∫øt phim v√† fill v√†o form
function fetchDetailMovie() {
    const apiUrl = 'https://localhost:7186/api/Movie/' + id;

    fetch(apiUrl)
        .then(response => {
            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
            return response.json();
        })
        .then(movie => {
            console.log("D·ªØ li·ªáu phim:", movie); // Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ

            // G√°n d·ªØ li·ªáu v√†o form
            const statValues = document.getElementsByClassName('stat-value');
            console.log('createdAt', movie.createdAt);
            document.getElementById('createdAtDisplay').innerHTML = movie.createdAt;

            // G√°n ID
            if (statValues.length > 0) statValues[0].innerText = movie.id;



            document.getElementById('movieId').value = movie.id;
            document.getElementById('movieId').value = movie.id;
            document.getElementById('createdAt').value = movie.createdAt;
            document.getElementById('title').value = movie.title;
            document.getElementById('description').value = movie.description;
            document.getElementById('releaseYear').value = movie.releaseYear;
            document.getElementById('director').value = movie.director;
            document.getElementById('country').value = movie.country;
            document.getElementById('actors').value = movie.actors;
            document.getElementById('duration').value = movie.duration;
            document.getElementById('poster').value = movie.poster;
            document.getElementById('trailerUrl').value = movie.trailerUrl;

            // Preview ·∫£nh poster
            document.getElementById('posterPreview').innerHTML = `<img src="${movie.poster}" alt="Movie Poster">`;

            // Hi·ªÉn th·ªã ng√†y t·∫°o
            document.getElementById('createdAtDisplay').innerText = new Date(movie.createdAt).toLocaleDateString();

            // Check genres (theo label)
            const checkboxes = document.querySelectorAll('input[name="genres"]');
            if (Array.isArray(movie.genres)) {
                checkboxes.forEach(checkbox => {
                    const label = document.querySelector(`label[for="${checkbox.id}"]`).innerText.trim();
                    checkbox.checked = movie.genres.includes(label);
                });
            }
        })
        .catch(error => {
            console.error("Error fetching movie:", error);
            alert('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu phim. Vui l√≤ng th·ª≠ l·∫°i sau.');
        });
}
function fetchGenresChoose() {
    const apiUrl = 'https://localhost:7186/api/Genres/check-genres/' + id;

    fetch(apiUrl)
        .then(response => {
            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
            return response.json();
        })
        .then(genres => {
            console.log("D·ªØ li·ªáu th·ªÉ lo·∫°i:", genres); // Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ

            const genreItems = document.querySelector('.genre-items')
            genreItems.innerHTML = ''
            genres.forEach(genre => {
                let genreItem = `<div class="genre-item">
                            <input type="checkbox" id="${genre.name}" name="genres" value="${genre.id}" ${genre.isCheck ? "checked" : ""}>
                            <label for="${genre.name}">${genre.name}</label>
                        </div>`
                genreItems.innerHTML += genreItem
            })

        })
        .catch(error => {
            console.error("Error fetching movie:", error);
            alert('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu phim. Vui l√≤ng th·ª≠ l·∫°i sau.');
        });
}
fetchGenresChoose()
// G·ªçi h√†m khi load trang
document.addEventListener('DOMContentLoaded', fetchDetailMovie);

